@model PagedViewModel<Book>
@{
    ViewData["Title"] = "Index";
}

<main id="tg-main" class="tg-main tg-haslayout">
    <!--************************************
            Inner Banner Start
    *************************************-->
    <div class="tg-innerbanner tg-haslayout tg-parallax tg-bginnerbanner"
         data-z-index="-100"
         data-appear-top-offset="600"
         data-parallax="scroll"
         data-image-src=@Url.Content("~/assets/images/parallax/bgparallax-07.jpg")>
        <div class="container">
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    <div class="tg-innerbannercontent">
                        <h1>All Books</h1>
                        <ol class="tg-breadcrumb">
                            <li><a href="javascript:void(0);">home</a></li>
                            <li class="tg-active">Books</li>
                        </ol>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--************************************
            Inner Banner End
    *************************************-->
    <!--************************************
                News Grid Start
        *************************************-->
    <div class="tg-sectionspace tg-haslayout">
        <div class="container">
            <div class="row">
                <div id="tg-twocolumns" class="tg-twocolumns">
                    <div class="col-xs-12 col-sm-8 col-md-8 col-lg-9 pull-right">
                        <div id="tg-content" class="tg-content">
                            <div class="tg-products">
                                <div class="tg-sectionhead">
                                    <h2><span>People’s Choice</span>Bestselling Books</h2>
                                </div>
                                <div id="products">
                                    <partial name="_Books" model="@Model" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-4 col-md-4 col-lg-3 pull-left">
                        <aside id="tg-sidebar" class="tg-sidebar">
                            <div class="tg-custom-widget">
                                @await Component.InvokeAsync("SearchPanel")
                            </div>
                        </aside>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--************************************
                News Grid End
        *************************************-->
</main>

@section addjs{
    <script>
        const priceRangeData = $("#price-range").data();

        const searchModel = {
            authors: [],
            publishers: [],
            languages: [],
            categories: [],
            min: priceRangeData.priceMin,
            max: priceRangeData.priceMax
        };

        $(document).ready(function() {
            $('.blog-pagination.ptb-20')
                .removeClass('blog-pagination')
                .removeClass('ptb-20')
                .addClass('list-inline');

            $("#price-range")
                .attr('range', `${searchModel.min}₼ - ${searchModel.max}₼`)
                .slider({
                    range: true,
                    min: searchModel.min,
                    max: searchModel.max,
                    values: [searchModel.min, searchModel.max],
                    slide: function(e, ui) {
                        $(e.target).attr('range', `${ui.values[0]}₼ - ${ui.values[1]}₼`);
                        searchModel.min = ui.values[0];
                        searchModel.max = ui.values[1];

                        filterProducts();
                    }
                });


            $('[data-entity-type]').click(function(e) {

                e.preventDefault();

                let model = $(e.currentTarget).data();  //entityType  id

                if ($(e.currentTarget).hasClass('active') == true) {
                    $(e.currentTarget).removeClass('active');
                    searchModel[`${model.entityType}`] = searchModel[`${model.entityType}`].filter(item => item != model.id);
                }
                else {
                    $(e.currentTarget).addClass('active');

                    if (searchModel[`${model.entityType}`].filter(item => item == model.id).length == 0) {
                        searchModel[`${model.entityType}`].push(model.id);
                    }
                }

                filterProducts();
            });
        });

        function filterProducts() {
            if ($.pid != undefined) {
                clearTimeout($.pid);
            }

            $.pid = setTimeout(function() {
                console.log(searchModel);

                $.ajax({
                    type: 'POST',
                    data: searchModel,
                    contentType: 'application/x-www-form-urlencoded',
                    success: function(response) {
                        toastr.success("The filter was applied!");
                        $('#products').html(response);
                    },
                    error: function(response) {
                        toastr.error("Something went wrong!");
                    }
                });
            }, 1500);
        }
    </script>
}
