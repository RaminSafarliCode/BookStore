@model BlogPostItemsViewModel
@{
    ViewData["Title"] = "Details";

    IEnumerable<BlogPostComment> GetComments(BlogPostComment parent)
    {
        if (parent.ParentId != null)
            yield return parent;

        foreach (var item in parent.Comments.SelectMany(c => GetComments(c)))
        {
            yield return item;
        }

    }
}

<!--************************************
                Inner Banner Start
        *************************************-->
<div class="tg-innerbanner tg-haslayout tg-parallax tg-bginnerbanner"
     data-z-index="-100"
     data-appear-top-offset="600"
     data-parallax="scroll"
     data-image-src=@Url.Content("~/assets/images/parallax/bgparallax-07.jpg")>
    <div class="container">
        <div class="row">
            <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                <div class="tg-innerbannercontent">
                    <h1>News &amp; Articles</h1>
                    <ol class="tg-breadcrumb">
                        <li><a asp-controller="home" asp-action="index">home</a></li>
                        <li><a asp-controller="blog" asp-action="index">news</a></li>
                        <li class="tg-active">@Model.BlogPost.Title.Substring(0, (Model.BlogPost.Title.Length < 20 ? Model.BlogPost.Title.Length : 20))...</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
</div>
<!--************************************
          Inner Banner End
  *************************************-->
<!--************************************
            News Grid Start
    *************************************-->
<div class="tg-sectionspace tg-haslayout">
    <div class="container">
        <div class="row">
            <div id="tg-twocolumns" class="tg-twocolumns">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    <figure class="tg-newsdetailimg">
                        <img src="~/uploads/images/@Model.BlogPost.ImagePath" alt="blog-image">
                        <figcaption class="tg-author">
                            <div class="tg-authorinfo">
                                <span class="tg-bookwriter">
                                    By:
                                    <a href="javascript:void(0);">@Model.BlogPost.CreatedByUser?.Name @Model.BlogPost.CreatedByUser?.Surname</a>
                                </span>
                                <ul class="tg-postmetadata">
                                    <li>
                                        <a href="javascript:void(0);">
                                            <i class="fa fa-comment-o"></i><i>@Model.BlogPost.Comments.Count() Comments</i>
                                        </a>
                                    </li>
                                    <li>
                                        <span class="post-view"><i class="far fa-regular fa-heart" style="padding-right:5px"></i>@Model.BlogPost.Reacts.Count Likes</span>
                                    </li>
                                </ul>
                            </div>
                        </figcaption>
                    </figure>
                </div>
                <div class="col-xs-12 col-sm-8 col-md-8 col-lg-9 pull-right">
                    <div id="tg-content" class="tg-content">
                        <div class="tg-newsdetail">
                            <div class="tg-blogpost-top">
                                <a href="javascript:void(0);">@Model.BlogPost.BlogPostCategory.Name</a>
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <input type="hidden" data-user-id="@User.GetCurrentUserId()" data-blogpost-id="@Model.BlogPost.Id" />
                                    <button class="like-button
                                                    @(Model.BlogPostReacts.Any(bpr => bpr.BlogPostId == Model.BlogPost.Id && bpr.CreatedByUserId == User.GetCurrentUserId()) ? "liked" : " ")">

                                        <span>Like<span>d</span></span>
                                    </button>
                                }

                            </div>
                            <div class="tg-themetagbox">
                                <span class="tg-themetag">featured</span>
                            </div>
                            <div class="tg-posttitle">
                                <h3>
                                    <a href="javascript:void(0);">@Model.BlogPost.Title</a>
                                </h3>
                            </div>
                            <div class="tg-description">
                                <p>@Html.Raw(Model.BlogPost.Body)</p>
                            </div>
                            <div class="tg-tagsshare">
                                <div class="tg-tags">
                                    <span>Tags:</span>
                                    <div class="tg-tagholder">
                                        @foreach (var item in Model.BlogPost.TagCloud)
                                        {
                                            <a class="tg-tag" href="javascript:void(0);">@item.Tag.Text</a>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="tg-commentsarea comments">
                                <div class="tg-sectionhead">
                                    <h2>@Model.BlogPost.Comments.Count() Comments</h2>
                                </div>
                                <ul id="tg-comments" class="tg-comments">

                                    @foreach (var comment in Model.BlogPost.Comments.Where(c => c.ParentId == null))
                                    {

                                        <li class="comment" id="c-@comment.Id" data-comment-id="@comment.Id">
                                            <div class="tg-authorbox">
                                                <div class="tg-authorinfo">
                                                    <div class="tg-authorhead">
                                                        <div class="tg-leftarea">
                                                            <div class="tg-authorname">
                                                                <h2>@($"{comment.CreatedByUser?.Name} {comment.CreatedByUser?.Surname}")</h2>
                                                                <span>Author Since: June 27, 2017</span>
                                                            </div>
                                                        </div>
                                                        <div class="tg-rightarea">
                                                            <a class="tg-btnreply  btn-comment-reply"
                                                           href="javascript:void(0);">
                                                                Reply<i class="fa fa-mail-reply"></i>
                                                            </a>
                                                        </div>
                                                    </div>
                                                    <div class="tg-description">
                                                        <p>
                                                            @comment.Text
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="tg-bottomarrow"></div>
                                            </div>
                                        </li>

                                        @foreach (var subComment in GetComments(comment))
                                        {
                                            <li class="comment comment-sub" id="c-@subComment.Id" data-comment-id="@subComment.Id">
                                                <div class="tg-authorbox">
                                                    <div class="tg-authorinfo">
                                                        <div class="tg-authorhead">
                                                            <div class="tg-leftarea">
                                                                <div class="tg-authorname">
                                                                    <h2>@($"{subComment.CreatedByUser?.Name} {subComment.CreatedByUser?.Surname}")</h2>
                                                                    <span>Author Since: June 27, 2017</span>
                                                                </div>
                                                            </div>
                                                            <div class="tg-rightarea">
                                                                <a class="tg-btnreply btn-comment-reply"
                                                           href="javascript:void(0);">
                                                                    Reply<i class="fa fa-mail-reply"></i>
                                                                </a>
                                                            </div>
                                                        </div>
                                                        <div class="tg-description">
                                                            <p>
                                                                @subComment.Text
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div class="tg-bottomarrow"></div>
                                                </div>
                                            </li>
                                        }
                                    }
                                </ul>
                            </div>
                            <div class="tg-leaveyourcomment">
                                <div class="tg-sectionhead">
                                    <h2>Leave Your Comment</h2>
                                </div>
                                <form method="post" class="tg-formtheme tg-formleavecomment" id="replyForm">
                                    <fieldset>
                                        <div id="replyToComment"></div>
                                        <input type="hidden" name="postId" value="@Model.BlogPost.Id" />
                                        <div class="form-group" style="margin-top: 2rem;">
                                            <textarea id="comment-text" name="comment" placeholder="Comment"></textarea>
                                        </div>
                                        <div class="form-group" style="margin-top: 2rem;">
                                            @if (true)
                                            {
                                                <button type="submit" class="tg-btn tg-active">Submit</button>
                                            }
                                            else
                                            {
                                                <a asp-action="Signin" asp-controller="account" class="btn btn-dark">Sign in to comment on post</a>
                                            }
                                        </div>
                                    </fieldset>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-xs-12 col-sm-4 col-md-4 col-lg-3 pull-left">
                    <aside id="tg-sidebar" class="tg-sidebar">
                        <div class="tg-widget tg-widgetsearch">
                            <form class="tg-formtheme tg-formsearch">
                                <div class="form-group">
                                    <button type="submit">
                                        <i class="icon-magnifier"></i>
                                    </button>
                                    <input type="search"
                                           name="search"
                                           class="form-group"
                                           placeholder="Search Here" />
                                </div>
                            </form>
                        </div>
                        <div class="tg-widget tg-catagories">
                            <div class="tg-widgettitle">
                                <h3>Categories</h3>
                            </div>
                            <div class="tg-widgetcontent">
                                <ul>
                                    <li>
                                        <a href="javascript:void(0);">
                                            <span>Art &amp; Photography</span><em>28245</em>
                                        </a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);"><span>Biography</span><em>4856</em></a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);"><span>Children’s Book</span><em>8654</em></a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);"><span>Craft &amp; Hobbies</span><em>6247</em></a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);">
                                            <span>Crime &amp; Thriller</span><em>888654</em>
                                        </a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);">
                                            <span>Fantasy &amp; Horror</span><em>873144</em>
                                        </a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);"><span>Fiction</span><em>18465</em></a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);"><span>Fod &amp; Drink</span><em>3148</em></a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);">
                                            <span>Graphic, Anime &amp; Manga</span><em>77531</em>
                                        </a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);"><span>Science Fiction</span><em>9247</em></a>
                                    </li>
                                    <li>
                                        <a href="javascript:void(0);"><span>View All</span></a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                        @await Component.InvokeAsync("TrendingBlogPosts")
                    </aside>
                </div>
            </div>
        </div>
    </div>
</div>
<!--************************************
            News Grid End
    *************************************-->
@section addcss{
    <style>
        .comment-sub {
            margin: 0;
            width: 100%;
            float: left;
            padding: 0 0 0 100px;
        }

        .like-button {
            --color: #1E2235;
            --color-hover: #1E2235;
            --color-active: #fff;
            --background: #fff;
            --background-hover: #c2bdcd;
            --background-active: #675c84;
            --border: #c2bdcd;
            --border-active: #675c84;
            --shadow: rgba(0, 17, 119, 0.025);
            display: block;
            outline: none;
            cursor: pointer;
            position: relative;
            border: 0;
            background: none;
            padding: 5px 23px 5px 26px;
            border-radius: 25px;
            line-height: 27px;
            font-family: inherit;
            font-weight: 600;
            font-size: 14px;
            color: var(--color);
            -webkit-appearance: none;
            margin: 0 14px;
            -webkit-tap-highlight-color: transparent;
            transition: color .2s linear;
        }

            .like-button:hover {
                --icon: var(--icon-hover);
                --color: var(--color-hover);
                --background: var(--background-hover);
                --border-width: 2px;
            }

            .like-button:active {
                --scale: .95;
            }

            .like-button:not(.liked):hover {
                --hand-rotate: 8;
                --hand-thumb-1: -12deg;
                --hand-thumb-2: 36deg;
            }

            .like-button.liked {
                --span-x: 2px;
                --span-d-o: 1;
                --span-d-x: 0;
                --icon: var(--icon-active);
                --color: var(--color-active);
                --border: var(--border-active);
                --background: var(--background-active);
            }

            .like-button:before {
                content: '';
                min-width: 103px;
                position: absolute;
                left: 0;
                top: 0;
                right: 0;
                bottom: 0;
                border-radius: inherit;
                transition: background .2s linear, transform .2s, box-shadow .2s linear;
                transform: scale(var(--scale, 1)) translateZ(0);
                background: var(--background);
                box-shadow: inset 0 0 0 var(--border-width, 1px) var(--border), 0 4px 8px var(--shadow), 0 8px 20px var(--shadow);
            }

            .like-button span {
                display: inline-block;
                vertical-align: top;
            }

            .like-button span span {
                    opacity: var(--span-d-o, 0);
                    transition: transform .25s, opacity .2s linear;
                    transform: translateX(var(--span-d-x, 4px)) translateZ(0);
            }

            .like-button > span {
                transition: transform .25s;
                transform: translateX(var(--span-x, 4px)) translateZ(0);
            }
    </style>
}




    @section addjs{
    <script>


        $(document).ready(function() {
            $(".btn-comment-reply").click(function(e) {
                e.preventDefault();

                $("#replyToComment").html("<a href='javascript:removeSelectedReply()' class='remove-selected-comment' >&times</a>").append($(e.currentTarget).closest(".comment").clone());

            })

            $("#replyForm").submit(function(e) {
                e.preventDefault();

                let formData = new FormData(e.currentTarget);
                let toCommentId = $(`#replyToComment li.comment`).data("comment-id");
                console.log("commentId", toCommentId);

                if (toCommentId != undefined) {
                    formData.set("commentId", toCommentId);
                }

                $.ajax({
                    url: `@Url.Action("PostComment", "Blog")`,
                    type: "POST",
                    data: formData,
                    contentType: false,
                    processData: false,
                    dataType: "json",
                    success: function(res) {
                        location.reload();
                    },
                    error: function(response) {

                        console.log("error var");
                        if (response.statusText == "OK") {
                            if (toCommentId != undefined) {
                                $(response.responseText).insertAfter($(`#c-${toCommentId}`));

                                $("#replyToComment").html("")
                                e.currentTarget.reset();
                                $("#comment-text").val("");
                            }
                            else {
                                $("div.comments ul").append($(response.responseText))
                                $("#comment-text").val("");
                            }
                        }
                        location.reload();

                        console.warn(response);
                    }
                });
            })
        })

        function removeSelectedReply(el) {
            $("#replyToComment").html("");
        }


        document.querySelectorAll('.like-button').forEach(button => {

            button.addEventListener('click', e => {
                button.classList.toggle('liked');
            })
        })

        $(document).ready(function() {

            $(".like-button").click(function(e) {
                e.preventDefault();

                let obj = $("input[data-blogpost-id][data-user-id]").data();

                obj.isLiked = $(".like-button").hasClass("liked");


                $.ajax({
                    url: `@Url.Action("ReactPost", "Blog")`,
                    type: "POST",
                    data: obj,
                    dataType: "json",
                    contentType: "application/x-www-form-urlencoded",
                    success: function(response) {

                        if (response.error == false) {
                            $(".post-view").html(`<i class="far fa-regular fa-heart" style="padding-right:5px"></i>${response.value} Likes`)
                        }

                        toastr.success = (response.message, "Success!");


                    },
                    error: function(response) {

                        if (response.error == true) {
                            toastr.error(response.message, "Error!");
                        }

                    }
                })

            })
        })
    </script>
}



